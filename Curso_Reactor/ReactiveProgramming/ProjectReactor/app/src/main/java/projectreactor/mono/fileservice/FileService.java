/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package projectreactor.mono.fileservice;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;

import javax.annotation.processing.Filer;

import org.reactivestreams.Publisher;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@Slf4j
public class FileService {
    private static final String PATH = "/app/src/main/resources/files/";

    public static void main(String[] args) {
        String filename = "Prueba";
        List<String> lista = List.of("Linea 1","Linea 2");

        writeFile(lista, createFile(filename));
        readFile(filename)
            .subscribe(lista1 -> lista.forEach(l -> log.info("Linea: {}",l)));

    }

    public static void writeFile(List<String> lines, Mono<FileWriter> publisher){
        publisher.subscribe(writer -> {
            try {
                lines.forEach(t -> {
                    try {
                        writer.write(t+"\n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });
                writer.close();
            } catch (IOException e) {
                log.error("Error guardando el archivo.", e);
            }
        });
    }

    public static Mono<List<String>> readFile(String name){
        return Mono.fromSupplier(() -> name)
            .map(s -> Paths.get("").toAbsolutePath().normalize().toString().concat(PATH).concat(s).concat(".txt"))
            .flatMap(path -> {
                try {
                    return Mono.just(new BufferedReader(new InputStreamReader(new FileInputStream(path))));
                } catch (FileNotFoundException e) {
                    return Mono.error(e);
                }
            })
            .map(reader -> reader.lines().collect(Collectors.toList()));

    }

    public static Mono<FileWriter> createFile(String name){
        return Mono.fromSupplier(() -> name)
            .map( s -> Paths.get("").toAbsolutePath().normalize().toString().concat(PATH).concat(s).concat(".txt"))
            .flatMap(path -> {
                try {
                    return Mono.just(new FileWriter(path));
                } catch (Exception e) {
                    return Mono.error(new RuntimeException("Error creating file '"+path+"': ", e));
                }
            }).doOnError(e -> log.error("Error creando el archivo: ", e));
    }
}
